import os
from datetime import datetime
from typing import Optional, List, Dict, Any
from sqlalchemy import create_engine, Column, BigInteger, Integer, String, Text, Boolean, DateTime, Float, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.future import select
from sqlalchemy import update
from sqlalchemy.orm import selectinload
from sqlalchemy import func, case


Base = declarative_base()

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö


class User(Base):
    __tablename__ = 'users'

    id = Column(BigInteger, primary_key=True)
    username = Column(String(255))
    first_name = Column(String(255))
    last_name = Column(String(255))
    full_name = Column(String(500))
    profile_photo_base64 = Column(Text)
    is_bot = Column(Boolean, default=False)
    confidence = Column(Float)
    thoughts = Column(Text)
    check_count = Column(Integer, default=0, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow,
                        onupdate=datetime.utcnow)

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    personal_channel = relationship(
        "PersonalChannel", back_populates="user", uselist=False)
    messages = relationship("UserMessage", back_populates="user")


class PersonalChannel(Base):
    __tablename__ = 'personal_channels'

    id = Column(BigInteger, primary_key=True)
    user_id = Column(BigInteger, ForeignKey('users.id', ondelete='CASCADE'))
    title = Column(String(255))
    username = Column(String(255))
    photo_base64 = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow,
                        onupdate=datetime.utcnow)

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    user = relationship("User", back_populates="personal_channel")
    posts = relationship("ChannelPost", back_populates="channel")


class ChannelPost(Base):
    __tablename__ = 'channel_posts'

    id = Column(BigInteger, primary_key=True)
    channel_id = Column(Integer, ForeignKey(
        'personal_channels.id', ondelete='CASCADE'))
    post_id = Column(BigInteger)
    text = Column(Text)
    media_base64 = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    channel = relationship("PersonalChannel", back_populates="posts")


class UserMessage(Base):
    __tablename__ = 'user_messages'

    id = Column(BigInteger, primary_key=True)
    user_id = Column(BigInteger, ForeignKey('users.id', ondelete='CASCADE'))
    chat_id = Column(BigInteger)
    message_id = Column(BigInteger)
    text = Column(Text)
    context = Column(Text)
    media_base64 = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    user = relationship("User", back_populates="messages")


class DatabaseSQLAlchemy:
    def __init__(self):
        self.database_url = os.getenv(
            'DATABASE_URL', 'postgresql://doom_user:doom_password@localhost:5432/doom_bot')
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ async URL
        self.async_database_url = self.database_url.replace(
            'postgresql://', 'postgresql+asyncpg://')
        self.engine = None
        self.session_factory = None
        self.MAX_CHECKS_BEFORE_CLEANUP = 3

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.engine = create_async_engine(
            self.async_database_url,
            pool_size=10,
            max_overflow=20,
            pool_timeout=10,
            echo_pool=True,        # üëà –ü–æ–∫–∞–∂–µ—Ç —Ä–∞–±–æ—Ç—É –ø—É–ª–∞
            echo=False
        )
        self.session_factory = sessionmaker(
            self.engine, class_=AsyncSession, expire_on_commit=False
        )
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLAlchemy —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.engine:
            await self.engine.dispose()

    async def save_user_message(
        self,
        user_id: int,
        chat_id: int,
        message_id: int,
        text: str,
        context: Optional[str] = None,
        media_base64: Optional[str] = None
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        async with self.session_factory() as session:
            msg = UserMessage(
                user_id=user_id,
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                context=context,
                media_base64=media_base64,
                created_at=datetime.utcnow()
            )
            session.add(msg)
            await session.commit()
        return True

    async def get_user_with_data(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –∫–∞–Ω–∞–ª–æ–º, —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –ø–æ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è"""
        async with self.session_factory() as session:
            stmt = (
                select(User)
                .where(User.id == user_id)
                .options(
                    selectinload(User.messages),
                    selectinload(User.personal_channel).selectinload(
                        PersonalChannel.posts)
                )
            )
            result = await session.execute(stmt)
            user: Optional[User] = result.scalar_one_or_none()

            if not user:
                return None

            posts = [
                {
                    "text": post.text,
                    "media_base64": post.media_base64
                }
                for post in user.personal_channel.posts
            ]
            return {
                "id": user.id,
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "full_name": user.full_name,
                "profile_photo_base64": user.profile_photo_base64,
                "is_bot": user.is_bot,
                "confidence": user.confidence,
                "thoughts": user.thoughts,
                "messages": [
                    f"""–ö–æ–Ω—Ç–µ–∫—Å—Ç: {msg.context or ''} \n –°–æ–æ–±—â–µ–Ω–∏–µ: {
                        msg.text or ''}""".strip()
                    for msg in user.messages
                    if msg.text or msg.context
                ],
                "personal_channel": {
                    "title": user.personal_channel.title,
                    "username": user.personal_channel.username,
                    "photo_base64": user.personal_channel.photo_base64,
                    "posts": posts if posts else None
                } if user.personal_channel else None
            }

    async def update_user_analysis(
        self,
        user_id: int,
        is_bot: bool,
        confidence: float,
        thoughts: str
    ) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç LLM, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –æ—á–∏—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        async with self.session_factory() as session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π check_count
            stmt = (
                update(User)
                .where(User.id == user_id)
                .values(
                    is_bot=is_bot,
                    confidence=confidence,
                    thoughts=thoughts,
                    check_count=case(
                        (User.check_count == None, 1),
                        else_=User.check_count + 1
                    ),
                    updated_at=datetime.utcnow()
                )
                .returning(User.check_count)
            )
            result = await session.execute(stmt)
            check_count = result.scalar()
            print(f"Updated check_count: {check_count}")

            await session.commit()
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äî –æ—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if check_count >= self.MAX_CHECKS_BEFORE_CLEANUP:
                print(f"""–û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {
                    user_id} –ø–æ—Å–ª–µ {check_count} –ø—Ä–æ–≤–µ—Ä–æ–∫""")
                await self.cleanup_user_images(user_id)

        return True

    async def should_check_user(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:
            stmt = select(User.check_count).where(User.id == user_id)
            result = await session.execute(stmt)
            check_count = result.scalar()

            print(f"CHECK_COUNT: {check_count}")
            return check_count is None or check_count < self.MAX_CHECKS_BEFORE_CLEANUP

    async def cleanup_user_images(self, user_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        async with self.session_factory() as session:
            # –û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            await session.execute(
                update(User)
                .where(User.id == user_id)
                .values(profile_photo_base64=None)
            )

            # –û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            await session.execute(
                update(PersonalChannel)
                .where(PersonalChannel.user_id == user_id)
                .values(photo_base64=None)
            )

            # –û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
            await session.execute(
                update(ChannelPost)
                .where(ChannelPost.channel_id.in_(
                    select(PersonalChannel.id).where(
                        PersonalChannel.user_id == user_id)
                ))
                .values(media_base64=None)
            )

            # –û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            await session.execute(
                update(UserMessage)
                .where(UserMessage.user_id == user_id)
                .values(media_base64=None)
            )

            await session.commit()
        return True

    async def should_cleanup_images(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:
            stmt = select(User.check_count).where(User.id == user_id)
            result = await session.execute(stmt)
            check_count = result.scalar()
            return check_count >= self.MAX_CHECKS_BEFORE_CLEANUP if check_count else False

    async def save_user(self, user_data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLAlchemy"""
        async with self.session_factory() as session:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                id=user_data['user_id'],
                username=user_data.get('username'),
                first_name=user_data.get('first_name'),
                last_name=user_data.get('last_name'),
                full_name=user_data.get('full_name'),
                profile_photo_base64=user_data.get('profile_photo_base64'),
                is_bot=user_data.get('is_bot', False),
                confidence=user_data.get('confidence'),
                thoughts=user_data.get('thoughts')
            )

            await session.merge(user)  # merge –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_data.get('personal_channel'):
                channel_data = user_data['personal_channel']
                channel = PersonalChannel(
                    user_id=user_data['user_id'],
                    title=channel_data.get('title'),
                    username=channel_data.get('username'),
                    photo_base64=channel_data.get('photo_base64')
                )
                await session.merge(channel)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã
                if channel_data.get('last_posts'):
                    for post_data in channel_data['last_posts']:
                        post = ChannelPost(
                            channel_id=channel.id,
                            text=post_data.get('text'),
                            media_base64=post_data.get('media_base64')
                        )
                        session.add(post)

            await session.commit()
        return True


db = DatabaseSQLAlchemy()
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
"""
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db = DatabaseSQLAlchemy()
await db.connect()

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
await db.increment_check_count(user_id)
if await db.should_cleanup_images(user_id):
    await db.cleanup_user_images(user_id)

# –ó–∞–∫—Ä—ã—Ç–∏–µ
await db.close()
"""
