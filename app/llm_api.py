from openai import OpenAI
import os
from dotenv import load_dotenv
from image_utils import encode_image_to_base64
import requests
import base64


load_dotenv(".env")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BASE_URL = 'https://openrouter.ai/api/v1'
MODELS_TO_TRY = ["mistralai/mistral-small-3.2-24b-instruct:free", "google/gemini-2.5-flash-lite-preview-06-17"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY, base_url=BASE_URL)

def get_antibot_prompt(account_json, user_name, chat_language="ru"):
    prompt_for_spam = f'''–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —Å–ø–∞–º-–±–æ—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–∑–Ω–∞–∫–∏:
1. –†–µ–∫–ª–∞–º–∞, –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã/–∑–∞—Ä–∞–±–æ—Ç–∫–∞  
2. –ß–∞—Å—Ç–æ –æ—Ç –∂–µ–Ω—Å–∫–∏—Ö –∏–º—ë–Ω: –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –≤ –≤–∏–¥–µ –≤–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–Ω–∑–∏–π –Ω–∞ —Ñ–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã/–º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã; —à–∞–±–ª–æ–Ω–Ω—ã–µ, –≤–µ–∂–ª–∏–≤–æ-—Å–ª–∞—â–∞–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –±–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —á–∞—Ç; –∏–Ω–æ–≥–¥–∞ —Ç–æ–ª—å–∫–æ —Å–º–∞–π–ª–∏–∫ ‚ù§Ô∏è  

‚Äî –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ, –Ω–æ **—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ —Å—Ç—Ä–∞–Ω–Ω—ã–π**  

**–ü—Ä–∏–º–µ—Ä—ã —Å–ø–∞–º-–±–æ—Ç–æ–≤:**
–û—Ç –ú–∏–ª–∞—è –õ–∏–ª–∏
–¢–µ–∫—Å—Ç: –û–π, –∫–∞–∫ –∂–µ —è —Ä–∞–¥–∞! üòç ¬´–ú–æ—Å–∫–≤–∞ —Å–ª–µ–∑–∞–º –Ω–µ –≤–µ—Ä–∏—Ç¬ª ‚Äî —ç—Ç–æ –∂–µ –∫–ª–∞—Å—Å–∏–∫–∞! –ù–µ –º–æ–≥—É –¥–æ–∂–¥–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é. –ù–∞–¥–µ—é—Å—å, —á—Ç–æ –∞–∫—Ç–µ—Ä—ã –±—É–¥—É—Ç –Ω–∞ –≤—ã—Å–æ—Ç–µ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ —Ç–µ–ø–ª–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä—é! üé¨‚ù§Ô∏è
–û—Ç –í–∞—Å–∏–ª–∏—Å–∞
**–ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é:** –ê–≤–∞—Ç–∞—Ä —Å –¥–µ–≤—É—à–∫–æ–π
–¢–µ–∫—Å—Ç: ü•∞
–û—Ç Yulia Naryshkina
–ó–ê–ö–†–ï–ü–õ–Å–ù–ù–´–ô –ö–ê–ù–ê–õ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:–í–∞—à–∏ –ø–æ–±–µ–¥—ã —Ç—É—Ç üí∏üí∏üí∏ (@e16_89A_1a6_Ff9_525
–¢–µ–∫—Å: –õ–æ–±–æ? –ó–∞—á–µ–º –æ–Ω —Ç–∞–º?

**–ù–ï —Å–ø–∞–º-–±–æ—Ç (NSFW-–∏–º—è, –Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ):**
–û—Ç Hentai_Miki  
–¢–µ–∫—Å—Ç: –ü–æ–º–Ω—é —è –Ω–∞ —Ç–æ–º –º–æ–º–µ–Ω—Ç–µ —Å–µ—Ä–∏–∞–ª –∏ —Å–∫–∏–ø–Ω—É–ª, —Å—Ç–æ–∏—Ç –æ–Ω–æ —Ç–æ–≥–æ –¥–∞–ª—å—à–µ? –í–µ–¥—å, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω –µ—â—ë –∏ "–¥–æ–±—Ä—ã–π" –≤—Ä–æ–¥–µ —Å—Ç–∞–ª, —á—Ç–æ –º–µ–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Å–º—É—Ç–∏–ª–æ.  
‚Äî –ò–º—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ, –Ω–µ —à–∞–±–ª–æ–Ω–Ω–æ–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–∫–æ—Ä–µ–µ –∞–Ω–∏–º–µ-—Ñ–∞–Ω, –∞ –Ω–µ –±–æ—Ç.

**–ù–ï —Å–ø–∞–º-–±–æ—Ç (—Ä–µ–∑–∫–∏–π, –Ω–æ –∂–∏–≤–æ–π —É—á–∞—Å—Ç–Ω–∏–∫):**
–û—Ç Bunaby  
–¢–µ–∫—Å—Ç: –≠—Ç–æ –∫–∞–Ω–∞–ª –ø–æ –≤—Å—è–∫–∏–º –≤–æ–µ–Ω–Ω—ã–º –ø—Ä–∏–∫–æ–ª–∞–º, –Ω–∞–º —Ç—É—Ç –≤–∞—à–µ–π –≥–∏–∫–æ–≤—Å–∫–æ–π —Ö–µ—Ä–Ω–∏ –Ω–µ –Ω–∞–¥–æ  
‚Äî –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑–∫–æ–µ, –Ω–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é. –ï—Å–ª–∏ —ç—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã, –∞ –Ω–µ –µ—ë –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî –Ω–µ –±–æ—Ç.

**–í–∞–∂–Ω–æ:**
- –û—Ü–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + —à–∞–±–ª–æ–Ω–Ω—ã–π —Å—Ç–∏–ª—å + –∏–º—è + –∫–∞–Ω–∞–ª.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–µ, –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –º–æ–≥–ª–æ –±—ã—Ç—å –æ–ø–µ—á–∞—Ç–∫–æ–π ‚Äî –Ω–µ –ø–æ–º–µ—á–∞–π –∫–∞–∫ –±–æ—Ç–∞.

---
–ë—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è messages, –≤ –Ω–µ–º:
"–ö–æ–Ω—Ç–µ–∫—Å—Ç" ‚Äî —ç—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç.
"–°–æ–æ–±—â–µ–Ω–∏–µ" ‚Äî —ç—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã–µ, —Ç–æ —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –±–æ—Ç–∞
–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: { '{' }\"thoughts\":..., \"is_bot\": true/false, \"confidence\": 0-1 { '}'}

–í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–π —è–∑—ã–∫ —á–∞—Ç–∞ ‚Äî {chat_language.upper()} ‚Äî –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ–ª–µ "thoughts".\n\n–î–∞–Ω–Ω—ã–µ: {account_json}'''
    return prompt_for_spam

def remove_none_values(obj):
    if isinstance(obj, dict):
        return {
            k: remove_none_values(v)
            for k, v in obj.items()
            if v is not None
        }
    elif isinstance(obj, list):
        return [remove_none_values(v) for v in obj]
    else:
        return obj

def preprocess_account_data_for_llm(account_json_pre):
    account_json = account_json_pre.copy()
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    account_json = account_json.copy()
    account_json.pop("profile_photo_base64", None)

    if "personal_channel" in account_json:
        account_json["personal_channel"] = account_json["personal_channel"].copy()
        account_json["personal_channel"].pop("photo_base64", None)

        if "posts" in account_json["personal_channel"]:
            if account_json["personal_channel"]["posts"]:
                for post in account_json["personal_channel"]["posts"]:
                    post.pop("media_base64", None)


    account_json = remove_none_values(account_json)

    if account_json.get("personal_channel") == {}:
        account_json.pop("personal_channel")
    return account_json

async def analyze_account_with_llm(account_json, chat_language="ru"):
    account_json_processed = preprocess_account_data_for_llm(account_json)
    print('account_json: ', account_json_processed)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
    system_prompt = "–¢—ã —Ñ–∏–ª—å—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–ø–∞–º-–±–æ—Ç–æ–º."
    messages = [
        {"role": "system", "content": system_prompt},
        {
            "role": "user",
            "content": [
                {"type": "text", "text": get_antibot_prompt(account_json_processed, chat_language)}
            ]
        }
    ]
    if account_json['profile_photo_base64']:
        messages[1]["content"].append({
            "type": "text",
            "text": "–ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        })

        messages[1]["content"].append({
            "type": "image_url",
            "image_url": {"url": account_json['profile_photo_base64']}
        })

    if account_json['personal_channel']:
        personal_channel = account_json['personal_channel']
        if personal_channel['photo_base64']:
            messages[1]["content"].append({
                "type": "text",
                "text": "–ê–≤–∞—Ç–∞—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞:"
            })

            messages[1]["content"].append({
                "type": "image_url",
                "image_url": {"url": personal_channel['photo_base64']}
            })
            if personal_channel['posts']:
                for p in personal_channel['posts']:
                    if p['text']:
                        messages[1]["content"].append({
                            "type": "text",
                            "text": p['text']
                        })
                    if p['media_base64']:
                        messages[1]["content"].append({
                            "type": "image_url",
                            "image_url": {"url": p['media_base64']}
                    })

    for model_name in MODELS_TO_TRY:
        try:
            completion = client.chat.completions.create(
                model=model_name,
                messages=messages,
                response_format={"type": "json_object"},
                temperature=0.01,
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API –º–æ–¥–µ–ª—å {model_name}: {e}")
            continue 
    response = completion.choices[0].message.content
    print(f'–ê–ù–¢–ò–°–ü–ê–ú–ë–û–¢ –æ—Ç–≤–µ—Ç: {response}')
    return response

async def moderate_message_with_llm(message_text, user_name, image_path=None, is_bot=None, dialog_context=None, chat_language='ru', channel_name=None):
    # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    channel_description = '–ö–∞–Ω–∞–ª –≥–∏–∫–æ–≤—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏'
    sensitivity = "low"  # –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞ high/medium –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞
    messages = []

# system prompt
    messages.append({
        "role": "system",
        "content": (
            f"""–¢—ã –º–æ–¥–µ—Ä–∏—Ä—É–µ—à—å —á–∞—Ç (–∫–∞–Ω–∞–ª: {channel_name}, –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {channel_description}).\n
–ú–æ–¥–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∂–∏–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ß–ê–¢–ê –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç:

1. –ü—Ä—è–º–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: "—Ç—ã –¥–æ–ª–±–æ—ë–±").
2. NSFW-–∫–æ–Ω—Ç–µ–Ω—Ç.
3. –£–≥—Ä–æ–∑—ã –≤—Ä–µ–¥–∞ (—Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ, –¥–µ–∞–Ω–æ–Ω –∏ —Ç.–ø.).

–ù–ï —Ñ–ª–∞–≥–∞–π:
- –ú–∞—Ç—ã –∏ —Å–∞—Ä–∫–∞–∑–º.
- –ö—Ä–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞, –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ –∞–∫—Ç–µ—Ä–æ–≤.
- –ì–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Ä—ã –∏–ª–∏ –∏–¥–µ–∏.

**–°–µ–Ω—Å–∏—Ç–∏–≤–Ω–æ—Å—Ç—å {sensitivity.upper()}**:
- LOW: —Ñ–ª–∞–≥–∞–π —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è.
- MEDIUM: —Ñ–ª–∞–≥–∞–π, –µ—Å–ª–∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ.
- HIGH: —Ñ–ª–∞–≥–∞–π –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è.

–û—Ç–≤–µ—Ç –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "thoughts": "<–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ>",
  "is_violating": true/false,
  "action": "warn"/"delete_and_ban"/"",
  "moderation_message": "<—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ>"
}}"""
        )
    })

# –¥–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    for msg in dialog_context:  # —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Ç–∏–ø–∞ {"user": "–ò–º—è", "text": "–°–æ–æ–±—â–µ–Ω–∏–µ"}
        messages.append({
            "role": "user",
            "content": f"{msg['sender_name']}: {msg['text']}"
        })

# –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.append({
        "role": "user",
        "content": f"{user_name}: {message_text}"
    })

# –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    messages.append({
        "role": "user",
        "content": (
            f"–ù–∞—Ä—É—à–∞–µ—Ç –ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞? –ü—Ä–æ–≤–µ—Ä—å –¢–û–õ–¨–ö–û –µ–≥–æ. "
            f"–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ. –Ø–∑—ã–∫ —á–∞—Ç–∞ ‚Äî {chat_language.upper()}."
        )
    })
    if image_path:
        base64_image = encode_image_to_base64(image_path)
        if base64_image:
            messages[1]["content"].append({
                "type": "image_url",
                "image_url": {"url": base64_image}
            })

    for model_name in MODELS_TO_TRY:
        try:
            completion = client.chat.completions.create(
                model=model_name,
                messages=messages,
                response_format={"type": "json_object"},
                temperature=0.01,
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API –º–æ–¥–µ–ª—å {model_name}: {e}")
            continue 
    response = completion.choices[0].message.content
    print(f'–î–ª—è –í—Ö–æ–¥–∞: {messages}\n –û—Ç–≤–µ—Ç: {response}')
    return response 
